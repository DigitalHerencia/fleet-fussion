name: "Dependency Resolution Handler"

on:
  issues:
    types: [closed]
  pull_request:
    types: [closed]

jobs:
  unblock-dependents:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
      - name: Find and unblock dependent issues/PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const closedNumber = context.payload.issue?.number || context.payload.pull_request?.number;
            if (!closedNumber) return;
            
            console.log(`Issue/PR #${closedNumber} was closed, checking for dependents...`);
            
            // Search for issues/PRs that depend on this one
            const searchQuery = `repo:${context.repo.owner}/${context.repo.repo} state:open "#${closedNumber}" in:body`;
            
            const searchResults = await github.rest.search.issuesAndPullRequests({
              q: searchQuery
            });
            
            for (const item of searchResults.data.items) {
              const body = item.body || '';
              const dependsPattern = new RegExp(`(?:depends on|blocked by|requires)\\s*#${closedNumber}\\b`, 'gi');
              
              if (dependsPattern.test(body)) {
                console.log(`Found dependent: #${item.number}`);
                
                // Check if this was the only dependency
                const allDependencies = [...body.matchAll(/(?:depends on|blocked by|requires)\\s*#(\\d+)/gi)]
                  .map(match => parseInt(match[1]));
                
                const remainingDeps = [];
                for (const depNum of allDependencies) {
                  if (depNum === closedNumber) continue;
                  
                  try {
                    const depIssue = await github.rest.issues.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: depNum
                    });
                    
                    if (depIssue.data.state === 'open') {
                      remainingDeps.push(depNum);
                    }
                  } catch (error) {
                    console.log(`Could not check dependency #${depNum}: ${error.message}`);
                  }
                }\n                \n                if (remainingDeps.length === 0) {\n                  // Remove blocked label\n                  try {\n                    await github.rest.issues.removeLabel({\n                      owner: context.repo.owner,\n                      repo: context.repo.repo,\n                      issue_number: item.number,\n                      name: 'Blocked'\n                    });\n                    \n                    // Add comment about unblocking\n                    await github.rest.issues.createComment({\n                      owner: context.repo.owner,\n                      repo: context.repo.repo,\n                      issue_number: item.number,\n                      body: `✅ **Unblocked**: All dependencies have been resolved. This ${item.pull_request ? 'PR' : 'issue'} is now ready for progress.`\n                    });\n                    \n                    console.log(`Unblocked #${item.number}`);\n                  } catch (error) {\n                    console.log(`Could not unblock #${item.number}: ${error.message}`);\n                  }\n                } else {\n                  // Update comment with remaining dependencies\n                  const remainingList = remainingDeps.map(num => `#${num}`).join(', ');\n                  await github.rest.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: item.number,\n                    body: `⏳ **Partially Unblocked**: #${closedNumber} has been resolved, but still waiting on: ${remainingList}`\n                  });\n                  \n                  console.log(`#${item.number} still blocked by: ${remainingList}`);\n                }\n              }\n            }