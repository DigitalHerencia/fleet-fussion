# @format

name: ðŸ“‹ Project Board Automation
on:
    issues:
        types: [opened, closed, reopened, assigned, labeled, unlabeled]
    pull_request:
        types: [opened, closed, labeled, unlabeled, review_requested]
    pull_request_target:
        types: [closed]

jobs:
    project-automation:
        name: Update Project Board
        runs-on: ubuntu-latest
        permissions:
            contents: read
            issues: write
            pull-requests: write
            repository-projects: write

        steps:
            - name: Move cards based on status
              uses: actions/github-script@v7
              with:
                  script: |
                      const { owner, repo } = context.repo;

                      // Project board column IDs (update these with your actual column IDs)
                      const columns = {
                        todo: "Y3Vyc29yOnYyOpLOC9kG5qRUb2Rv",           // To Do
                        inProgress: "Y3Vyc29yOnYyOpLOC9kG5qtJbiBQcm9ncmVzcw==", // In Progress  
                        review: "Y3Vyc29yOnYyOpLOC9kG5qZSZXZpZXc=",          // Review
                        done: "Y3Vyc29yOnYyOpLOC9kG5qREb25l",              // Done
                        blocked: null // Add blocked column ID if you have a Blocked column
                      };

                      let itemNumber, itemType, labels = [], state, isDraft = false;

                      if (context.eventName === 'pull_request') {
                        itemNumber = context.payload.pull_request.number;
                        itemType = 'pull_request';
                        labels = context.payload.pull_request.labels.map(l => l.name);
                        state = context.payload.pull_request.state;
                        isDraft = context.payload.pull_request.draft;
                      } else {
                        itemNumber = context.payload.issue.number;
                        itemType = 'issue';
                        labels = context.payload.issue.labels.map(l => l.name);
                        state = context.payload.issue.state;
                      }

                      // Determine target column based on state and labels
                      let targetColumn = null;

                      if (state === 'closed') {
                        targetColumn = columns.done;
                      } else if (labels.includes('Blocked') && columns.blocked) {
                        targetColumn = columns.blocked;
                      } else if (itemType === 'pull_request' && !isDraft) {
                        targetColumn = columns.review;
                      } else if (labels.includes('Has-PR') || context.payload.assignees?.length > 0) {
                        targetColumn = columns.inProgress;
                      } else if (state === 'open') {
                        targetColumn = columns.todo;
                      }

                      if (targetColumn) {
                        try {
                          // Note: This is a simplified version. For full project v2 integration,
                          // you would need to use the GraphQL API with proper project item management
                          console.log(`Would move ${itemType} #${itemNumber} to column ${targetColumn}`);
                          
                          // Add comment for manual tracking until full project integration
                          if (context.eventName === 'issues' && context.payload.action === 'opened') {
                            await github.rest.issues.createComment({
                              owner, repo, issue_number: itemNumber,
                              body: `ðŸ“‹ **Project Status**: Added to project board in To Do column.\n\n_Automated by GitFlow workflow._`
                            });
                          }
                        } catch (error) {
                          console.log(`Error moving item: ${error.message}`);
                        }
                      }

            - name: Auto-assign milestones
              uses: actions/github-script@v7
              with:
                  script: |
                      const { owner, repo } = context.repo;

                      if (context.eventName !== 'issues' || context.payload.action !== 'opened') {
                        return;
                      }

                      const issueNumber = context.payload.issue.number;
                      const labels = context.payload.issue.labels.map(l => l.name);
                      const body = context.payload.issue.body || '';

                      // Get milestones
                      const milestones = await github.rest.issues.listMilestones({
                        owner, repo, state: 'open'
                      });

                      // Simple milestone assignment logic
                      let targetMilestone = null;

                      if (labels.includes('Priority-High') || labels.includes('Bug')) {
                        // High priority items go to MVP Launch
                        targetMilestone = milestones.data.find(m => m.title.includes('MVP Launch'));
                      } else if (labels.includes('Feature')) {
                        // Features go to Q3 2025 Release
                        targetMilestone = milestones.data.find(m => m.title.includes('Q3 2025'));
                      } else if (labels.includes('Documentation')) {
                        // Docs go to Testing & Automation
                        targetMilestone = milestones.data.find(m => m.title.includes('Testing & Automation'));
                      }

                      if (targetMilestone) {
                        await github.rest.issues.update({
                          owner, repo, issue_number: issueNumber,
                          milestone: targetMilestone.number
                        });
                        
                        await github.rest.issues.createComment({
                          owner, repo, issue_number: issueNumber,
                          body: `ðŸŽ¯ **Milestone assigned**: ${targetMilestone.title}\n\n_Assigned based on priority and type labels._`
                        });
                      }
