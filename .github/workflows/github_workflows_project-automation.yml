name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed, edited, labeled, unlabeled]
  pull_request:
    types: [opened, reopened, closed, edited, labeled, unlabeled]

jobs:
  project-automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add or Move Card on Project Board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Project and column IDs
            const projectId = "P4_kwDOA2w7OM4";
            const columns = {
              todo: "Y3Vyc29yOnYyOpLOC9kG5qRUb2Rv",
              inProgress: "Y3Vyc29yOnYyOpLOC9kG5qtJbiBQcm9ncmVzcw==",
              review: "Y3Vyc29yOnYyOpLOC9kG5qZSZXZpZXc=",
              done: "Y3Vyc29yOnYyOpLOC9kG5qREb25l"
            };

            // Helper to get project card for an issue or PR
            async function getProjectCard(contentId) {
              for (const colId of Object.values(columns)) {
                const cards = await github.rest.projects.listCards({ column_id: colId, per_page: 100 });
                const card = cards.data.find(card => card.content_url && card.content_url.endsWith(`/${contentId}`));
                if (card) return { card, colId };
              }
              return null;
            }

            // Determine item type and ID
            let itemId, itemType, state, labels = [];
            if (context.eventName.startsWith('issues')) {
              itemId = context.payload.issue.id;
              itemType = 'Issue';
              state = context.payload.issue.state;
              labels = context.payload.issue.labels.map(l => l.name);
            } else if (context.eventName.startsWith('pull_request')) {
              itemId = context.payload.pull_request.id;
              itemType = 'PullRequest';
              state = context.payload.pull_request.state;
              labels = context.payload.pull_request.labels.map(l => l.name);
            } else {
              return;
            }

            // Decide target column
            let targetColumn = columns.todo;
            if (state === 'closed') {
              targetColumn = columns.done;
            } else if (labels.includes('Blocked')) {
              targetColumn = columns.todo;
            } else if (labels.includes('Feature') || labels.includes('Bug')) {
              targetColumn = columns.inProgress;
            } else if (labels.includes('Has-PR')) {
              targetColumn = columns.review;
            }

            // Find existing card
            const cardInfo = await getProjectCard(itemId);
            if (cardInfo) {
              // Move card if not in correct column
              if (cardInfo.colId !== targetColumn) {
                await github.rest.projects.moveCard({
                  card_id: cardInfo.card.id,
                  position: 'top',
                  column_id: targetColumn
                });
              }
            } else {
              // Add new card
              await github.rest.projects.createCard({
                column_id: targetColumn,
                content_id: itemId,
                content_type: itemType
              });
            }

      - name: Set Milestone for Q3 2025
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Set milestone for new issues
            const milestoneTitle = 'Q3 2025';
            const milestones = await github.rest.issues.listMilestones({ owner: context.repo.owner, repo: context.repo.repo });
            const milestone = milestones.data.find(m => m.title === milestoneTitle);
            if (milestone) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                milestone: milestone.number
              });
            }

      - name: Auto-assign to Project Owner
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Auto-assign new issues to repo owner
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: [context.repo.owner]
            });