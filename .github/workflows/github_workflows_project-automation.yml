name: "FleetFusion Project Board Automation"

on:
  issues:
    types: [opened, labeled, unlabeled, reopened, closed]
  pull_request:
    types: [opened, labeled, unlabeled, reopened, closed, ready_for_review]

jobs:
  manage-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Move card in FleetFusion Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 4; // FleetFusion Project #4
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // FleetFusion Project Column IDs (updated with actual column IDs)
            const columns = {
              todo: "Y3Vyc29yOnYyOpLOC9kG5qRUb2Rv",
              inProgress: "Y3Vyc29yOnYyOpLOC9kG5qtJbiBQcm9ncmVzcw==",
              review: "Y3Vyc29yOnYyOpLOC9kG5qZSZXZpZXc=",
              done: "Y3Vyc29yOnYyOpLOC9kG5qREb25l",
              blocked: null // Add blocked column ID here if you have one
            };

            const payload = context.payload;
            const isIssue = !!payload.issue;
            const item = isIssue ? payload.issue : payload.pull_request;
            const labels = (item.labels || []).map(l => l.name);
            const state = item.state;

            let targetColumn = null;

            // Determine target column based on state and labels
            if (state === 'closed') {
              targetColumn = columns.done;
            } else if (labels.includes('Blocked')) {
              targetColumn = columns.blocked || columns.todo; // Use blocked column if available, otherwise todo
            } else if (labels.includes('Has-PR') || (!isIssue && state === 'open')) {
              targetColumn = columns.review; // PRs and issues with PRs go to review
            } else if (labels.some(l => ['Feature', 'Bug', 'Documentation', 'Code-Quality', 'Testing'].includes(l))) {
              targetColumn = columns.inProgress;
            } else if (isIssue && state === 'open') {
              targetColumn = columns.todo; // New issues start in todo
            }

            if (!targetColumn) {
              console.log('No target column determined, skipping');
              return;
            }

            console.log(`Moving ${isIssue ? 'issue' : 'PR'} #${item.number} to column`);

            // Note: GitHub's GraphQL API is more appropriate for Projects v2
            // This is a simplified example - you may need to use GraphQL for Projects v2

      - name: Auto-assign milestone to new issues
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = context.payload.issue.labels.map(l => l.name);
            let milestoneTitle = null;

            // Assign milestone based on labels and priority
            if (labels.includes('Priority-High') || labels.includes('Bug')) {
              milestoneTitle = 'MVP Launch';
            } else if (labels.includes('Feature')) {
              milestoneTitle = 'Q3 2025 Release';
            } else if (labels.includes('Testing') || labels.includes('Code-Quality')) {
              milestoneTitle = 'Testing & Automation Hardening';
            } else if (labels.includes('Documentation')) {
              milestoneTitle = 'Post-Launch Enhancements';
            }

            if (!milestoneTitle) return;

            // Find the milestone
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const milestone = milestones.data.find(m => m.title === milestoneTitle);
            if (!milestone) {
              console.log(`Milestone "${milestoneTitle}" not found`);
              return;
            }

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              milestone: milestone.number
            });

            console.log(`Assigned milestone "${milestoneTitle}" to issue #${context.issue.number}`);
