name: "FleetFusion PR Automation"

on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize, ready_for_review]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  pr-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Auto-fix PR title if missing release type
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.trim();
            const types = ['feat', 'fix', 'docs', 'chore', 'refactor', 'test', 'config'];
            const typePattern = new RegExp(`^(${types.join('|')}):\\s`, 'i');

            if (!typePattern.test(title)) {
              // Try to guess type from branch prefix
              const branch = pr.head.ref;
              let guessedType = 'fix';
              if (branch.startsWith('feature/')) guessedType = 'feat';
              else if (branch.startsWith('fix/')) guessedType = 'fix';
              else if (branch.startsWith('docs/')) guessedType = 'docs';
              else if (branch.startsWith('chore/')) guessedType = 'chore';
              else if (branch.startsWith('refactor/')) guessedType = 'refactor';
              else if (branch.startsWith('test/')) guessedType = 'test';
              else if (branch.startsWith('config/')) guessedType = 'config';

              const newTitle = `${guessedType}: ${title.replace(/^(feat|fix|docs|chore|refactor|test|config):\s*/i, '')}`;
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title: newTitle
              });
              console.log(`Auto-fixed PR title to: "${newTitle}"`);
            } else {
              console.log('PR title already follows semantic convention.');
            }

      - name: Ensure semantic PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          requireScope: false
          types: |
            feat
            fix
            docs
            chore
            refactor
            test
            config

      - name: Auto-label by branch prefix
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.payload.pull_request.head.ref;
            const prNumber = context.payload.pull_request.number;

            const branchLabelMap = {
              'feature/': 'Feature',
              'fix/': 'Bug', 
              'docs/': 'Documentation',
              'test/': 'Testing',
              'refactor/': 'Code-Quality',
              'config/': 'Configuration'
            };

            for (const [prefix, label] of Object.entries(branchLabelMap)) {
              if (branch.startsWith(prefix)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: [label]
                });
                console.log(`Added label "${label}" to PR #${prNumber}`);
                break;
              }
            }

      - name: Link PR to referenced issues & mark Has-PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            const prNumber = pr.number;

            // Find issue references (Closes #123, Fixes #456, Resolves #789)
            const issueRefs = [...body.matchAll(/(?:closes|fixes|resolves)\s+#(\d+)/gi)]
              .map(match => parseInt(match[1]));

            for (const issueNumber of issueRefs) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['Has-PR']
                });
                console.log(`Added "Has-PR" label to issue #${issueNumber}`);
              } catch (error) {
                console.log(`Could not label issue #${issueNumber}: ${error.message}`);
              }
            }

      - name: Auto-assign priority based on milestone
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Extract milestone from PR body
            const milestoneMatch = body.match(/MVP Launch|Q3 2025 Release|Testing & Automation Hardening|Post-Launch Enhancements/i);
            if (!milestoneMatch) return;

            const milestone = milestoneMatch[0];
            let priority = null;

            switch (milestone) {
              case 'MVP Launch':
                priority = 'Priority-High';
                break;
              case 'Q3 2025 Release':
                priority = 'Priority-Medium';
                break;
              default:
                priority = 'Priority-Low';
            }

            if (priority) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: [priority]
              });
              console.log(`Added "${priority}" label based on milestone "${milestone}"`);
            }

      - name: Check for dependencies and blocked status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            const prNumber = pr.number;
            
            // Check for dependency references ("depends on #123", "blocked by #456")
            const dependencyRefs = [...body.matchAll(/(?:depends on|blocked by|requires)\s*#(\d+)/gi)]
              .map(match => parseInt(match[1]));
            
            if (dependencyRefs.length > 0) {
              // Add blocked label if dependencies found
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['Blocked']
              });
              
              // Comment with dependency information
              const depList = dependencyRefs.map(num => `#${num}`).join(', ');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `ðŸš« **Blocked**: This PR depends on ${depList}. It will be automatically unblocked when dependencies are resolved.`
              });
              
              console.log(`Added "Blocked" label due to dependencies: ${depList}`);
            }

      - name: Request review from @DigitalHerencia automatically
        if: |
          github.actor != 'DigitalHerencia' &&
          github.event.pull_request.draft == false
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: ['DigitalHerencia']
            });
            console.log(`Requested review from @DigitalHerencia for PR #${context.payload.pull_request.number}`);
