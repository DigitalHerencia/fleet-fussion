# @format

name: "Branch & PR Title Conventions"

on:
    pull_request_target:
        types: [opened, synchronize, edited, reopened, ready_for_review]

jobs:
    validate-conventions:
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
            contents: read

        steps:
            - name: Validate conventions
              id: validate
              run: |
                  branch="${{ github.head_ref || github.ref_name }}"
                  pr_title="${{ github.event.pull_request.title }}"

                  validation_message=""
                  has_errors=false

                  # Validate branch name
                  if [[ ! "$branch" =~ ^(feature|feat|fix|bugfix|docs|doc|test|tests|refactor|config|chore)/.+ ]]; then
                    has_errors=true
                    validation_message+="‚ùå **Branch name validation failed**"$'\n'$'\n'
                    validation_message+="**Current branch**: \`$branch\`"$'\n'$'\n'
                    validation_message+="**Required format**: \`type/description\`"$'\n'$'\n'
                    validation_message+="**Valid prefixes**:"$'\n'
                    validation_message+="- \`feature/\` or \`feat/\` - New features"$'\n'
                    validation_message+="- \`fix/\` or \`bugfix/\` - Bug fixes"$'\n'
                    validation_message+="- \`docs/\` or \`doc/\` - Documentation"$'\n'
                    validation_message+="- \`test/\` or \`tests/\` - Tests"$'\n'
                    validation_message+="- \`refactor/\` - Code refactoring"$'\n'
                    validation_message+="- \`config/\` - Configuration changes"$'\n'
                    validation_message+="- \`chore/\` - Maintenance tasks"$'\n'$'\n'
                    validation_message+="**Examples**:"$'\n'
                    validation_message+="- \`feature/add-vehicle-tracking\`"$'\n'
                    validation_message+="- \`fix/dashboard-loading-issue\`"$'\n'
                    validation_message+="- \`docs/update-api-guide\`"$'\n'$'\n'
                  fi

                  # Validate PR title (minimum 10 characters after type:)
                  if [[ ! "$pr_title" =~ ^(feat|fix|docs|test|refactor|config|chore):[[:space:]].{10,}$ ]]; then
                    has_errors=true
                    validation_message+="‚ùå **PR title validation failed**"$'\n'$'\n'
                    validation_message+="**Current title**: \`$pr_title\`"$'\n'$'\n'
                    validation_message+="**Required format**: \`type: description\` (minimum 10 characters)"$'\n'$'\n'
                    validation_message+="**Valid types**:"$'\n'
                    validation_message+="- \`feat\` - New features"$'\n'
                    validation_message+="- \`fix\` - Bug fixes"$'\n'
                    validation_message+="- \`docs\` - Documentation"$'\n'
                    validation_message+="- \`test\` - Tests"$'\n'
                    validation_message+="- \`refactor\` - Code refactoring"$'\n'
                    validation_message+="- \`config\` - Configuration changes"$'\n'
                    validation_message+="- \`chore\` - Maintenance tasks"$'\n'$'\n'
                    validation_message+="**Examples**:"$'\n'
                    validation_message+="- \`feat: add vehicle tracking dashboard\`"$'\n'
                    validation_message+="- \`fix: resolve dashboard loading issue\`"$'\n'
                    validation_message+="- \`docs: update API documentation\`"$'\n'$'\n'
                  fi

                  # Set success message if no errors
                  if [ "$has_errors" = false ]; then
                    validation_message="‚úÖ **All conventions validated successfully!**"$'\n'$'\n'
                    validation_message+="Branch name and PR title follow the required format."
                  fi

                  # Export for GitHub Actions
                  echo "validation_failed=$has_errors" >> $GITHUB_OUTPUT
                  echo "validation_message<<EOF" >> $GITHUB_OUTPUT
                  echo "$validation_message" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Comment on PR
              if: always()
              uses: actions/github-script@v7
              with:
                  script: |
                      const validationFailed = '${{ steps.validate.outputs.validation_failed }}' === 'true';
                      const validationMessage = `${{ steps.validate.outputs.validation_message }}`;

                      // Find existing convention comment
                      const comments = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.data.find(comment => 
                        comment.user.type === 'Bot' && 
                        comment.body.includes('Branch & PR Title Conventions')
                      );

                      const commentBody = `## ü§ñ Branch & PR Title Conventions

                      ${validationMessage}

                      ---
                      *This check runs automatically on every PR. Please ensure your branch name and PR title follow the conventions above.*`;

                      if (botComment) {
                        // Update existing comment
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: commentBody
                        });
                      } else {
                        // Create new comment
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: commentBody
                        });
                      }

            - name: Auto-label based on branch prefix
              uses: actions/github-script@v7
              with:
                  script: |
                      const branch = '${{ github.head_ref || github.ref_name }}';
                      const labelMap = {
                        'feature': 'Feature',
                        'feat': 'Feature', 
                        'fix': 'Bug',
                        'bugfix': 'Bug',
                        'docs': 'Documentation',
                        'doc': 'Documentation',
                        'test': 'Testing',
                        'tests': 'Testing',
                        'refactor': 'Refactor',
                        'config': 'Configuration',
                        'chore': 'Maintenance'
                      };

                      const prefix = branch.split('/')[0];
                      const label = labelMap[prefix];

                      if (label) {
                        try {
                          await github.rest.issues.addLabels({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: context.issue.number,
                            labels: [label]
                          });
                        } catch (error) {
                          console.log(`Label "${label}" might not exist, skipping auto-labeling`);
                        }
                      }

            - name: Fail if validation failed
              if: steps.validate.outputs.validation_failed == 'true'
              run: |
                  echo "‚ùå Convention validation failed. Please fix the issues above."
                  exit 1
