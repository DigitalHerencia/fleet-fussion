generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                  String                   @id @default(uuid())
  clerkId             String                   @unique @map("clerk_id")
  name                String
  slug                String                   @unique
  mcNumber            String?                  @map("mc_number")
  address             String?
  city                String?
  state               String?
  zip                 String?
  phone               String?
  email               String?
  logoUrl             String?                  @map("logo_url")
  subscriptionTier    SubscriptionTier         @default(free) @map("subscription_tier")
  subscriptionStatus  SubscriptionStatus       @default(trial) @map("subscription_status")
  maxUsers            Int                      @default(5) @map("max_users")
  billingEmail        String?                  @map("billing_email")
  settings            Json?                    @default("{\"fuelUnit\": \"gallons\", \"timezone\": \"America/Denver\", \"dateFormat\": \"MM/dd/yyyy\", \"distanceUnit\": \"miles\"}")
  isActive            Boolean                  @default(true) @map("is_active")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  dotNumber           String?
  auditLogs           AuditLog[]
  complianceDocuments ComplianceDocument[]
  drivers             Driver[]
  IftaFuelPurchase    IftaFuelPurchase[]
  iftaReports         IftaReport[]
  IftaTrip            IftaTrip[]
  loads               Load[]
  users               User[]
  vehicles            Vehicle[]
  memberships         OrganizationMembership[]

  @@index([clerkId])
  @@index([slug])
  @@map("organizations")
}

model User {
  id                 String                   @id @default(uuid())
  clerkId            String                   @unique @map("clerk_id")
  organizationId     String?                  @map("organization_id") // <-- Now nullable
  email              String?                  // <-- Now nullable
  firstName          String?                  @map("first_name")
  lastName           String?                  @map("last_name")
  profileImage       String?                  @map("profile_image")
  role               UserRole                 @default(viewer)
  permissions        Json?                    @default("[]")
  isActive           Boolean                  @default(true) @map("is_active")
  lastLogin          DateTime?                @map("last_login")
  createdAt          DateTime                 @default(now()) @map("created_at")
  updatedAt          DateTime                 @updatedAt @map("updated_at")
  onboardingSteps    Json?                    @default("{}") @map("onboarding_steps")
  onboardingComplete Boolean                  @default(false) @map("onboarding_complete")
  auditLogs          AuditLog[]
  ComplianceDocument ComplianceDocument[]     @relation("VerifiedByUser")
  driver             Driver?
  IftaReport         IftaReport[]             @relation("SubmittedByUser")
  organization       Organization?            @relation(fields: [organizationId], references: [id], onDelete: Cascade) // <-- Make relation optional
  memberships        OrganizationMembership[]

  @@index([clerkId])
  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@map("users")
}

model Vehicle {
  id                     String               @id @default(uuid())
  organizationId         String               @map("organization_id")
  type                   String
  status                 VehicleStatus        @default(active)
  make                   String?
  model                  String?
  year                   Int?
  vin                    String?
  licensePlate           String?              @map("license_plate")
  licensePlateState      String?              @map("license_plate_state")
  unitNumber             String               @map("unit_number")
  currentOdometer        Int?                 @map("current_odometer")
  lastOdometerUpdate     DateTime?            @map("last_odometer_update")
  fuelType               String?              @map("fuel_type")
  lastInspectionDate     DateTime?            @map("last_inspection_date") @db.Date
  insuranceExpiration    DateTime?            @map("insurance_expiration") @db.Date
  notes                  String?
  customFields           Json?                @default("{}") @map("custom_fields")
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  nextInspectionDue      DateTime?            @map("next_inspection_date") @db.Date
  registrationExpiration DateTime?            @map("registration_expiry") @db.Date
  complianceDocuments    ComplianceDocument[]
  iftaFuelPurchases      IftaFuelPurchase[]   @relation("VehicleIftaFuelPurchases")
  iftaTrips              IftaTrip[]           @relation("VehicleIftaTrips")
  trailerLoads           Load[]               @relation("TrailerLoads")
  loads                  Load[]               @relation("VehicleLoads")
  organization           Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, unitNumber], name: "vehicles_org_unit_unique")
  @@index([organizationId])
  @@index([unitNumber])
  @@index([status])
  @@index([type])
  @@map("vehicles")
}

model Driver {
  id                    String               @id @default(uuid())
  organizationId        String               @map("organization_id")
  userId                String?              @unique @map("user_id")
  employeeId            String?              @map("employee_id")
  firstName             String               @map("first_name")
  lastName              String               @map("last_name")
  email                 String?
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zip                   String?
  licenseNumber         String?              @map("license_number")
  licenseState          String?              @map("license_state")
  licenseClass          String?              @map("license_class")
  licenseExpiration     DateTime?            @map("license_expiration") @db.Date
  drugTestDate          DateTime?            @map("drug_test_date") @db.Date
  hireDate              DateTime?            @map("hire_date") @db.Date
  terminationDate       DateTime?            @map("termination_date") @db.Date
  status                DriverStatus         @default(active)
  notes                 String?
  customFields          Json?                @default("{}") @map("custom_fields")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  backgroundCheckDate   DateTime?            @map("background_check") @db.Date
  emergencyContact1     String?              @map("emergency_contact_1")
  emergencyContact2     String?              @map("emergency_contact_2")
  emergencyContact3     String?              @map("emergency_contact_3")
  medicalCardExpiration DateTime?            @map("medical_card_exp") @db.Date
  complianceDocuments   ComplianceDocument[]
  organization          Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User?                @relation(fields: [userId], references: [id])
  loads                 Load[]

  @@unique([organizationId, employeeId], name: "drivers_org_employee_unique")
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([licenseNumber])
  @@map("drivers")
}

model Load {
  id                    String       @id @default(uuid())
  organizationId        String       @map("organization_id")
  driverId              String?      @map("driver_id")
  vehicleId             String?      @map("vehicle_id")
  trailerId             String?      @map("trailer_id")
  loadNumber            String       @map("load_number")
  referenceNumber       String?      @map("reference_number")
  status                LoadStatus   @default(pending)
  customerName          String?      @map("customer_name")
  customerContact       String?      @map("customer_contact")
  customerPhone         String?      @map("customer_phone")
  customerEmail         String?      @map("customer_email")
  originAddress         String       @map("origin_address")
  originCity            String       @map("origin_city")
  originState           String       @map("origin_state")
  originZip             String       @map("origin_zip")
  originLat             Decimal?     @map("origin_lat") @db.Decimal(10, 6)
  originLng             Decimal?     @map("origin_lng") @db.Decimal(10, 6)
  destinationAddress    String       @map("destination_address")
  destinationCity       String       @map("destination_city")
  destinationState      String       @map("destination_state")
  destinationZip        String       @map("destination_zip")
  destinationLat        Decimal?     @map("destination_lat") @db.Decimal(10, 6)
  destinationLng        Decimal?     @map("destination_lng") @db.Decimal(10, 6)
  rate                  Decimal?     @db.Decimal(10, 2)
  currency              String?      @default("USD")
  scheduledPickupDate   DateTime?    @map("scheduled_pickup_date")
  actualPickupDate      DateTime?    @map("actual_pickup_date")
  scheduledDeliveryDate DateTime?    @map("scheduled_delivery_date")
  actualDeliveryDate    DateTime?    @map("actual_delivery_date")
  weight                Int?
  pieces                Int?
  commodity             String?
  hazmat                Boolean?     @default(false)
  estimatedMiles        Int?         @map("estimated_miles")
  actualMiles           Int?         @map("actual_miles")
  notes                 String?
  instructions          String?
  customFields          Json?        @default("{}") @map("custom_fields")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  driver                Driver?      @relation(fields: [driverId], references: [id])
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  trailer               Vehicle?     @relation("TrailerLoads", fields: [trailerId], references: [id])
  vehicle               Vehicle?     @relation("VehicleLoads", fields: [vehicleId], references: [id])

  @@unique([organizationId, loadNumber], name: "loads_org_load_unique")
  @@index([organizationId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([trailerId])
  @@index([status])
  @@index([loadNumber])
  @@index([scheduledPickupDate], map: "loads_scheduled_pickup_idx")
  @@map("loads")
}

model ComplianceDocument {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  driverId         String?      @map("driver_id")
  vehicleId        String?      @map("vehicle_id")
  type             String
  title            String
  documentNumber   String?      @map("document_number")
  issuingAuthority String?      @map("issuing_authority")
  fileUrl          String?      @map("file_url")
  fileName         String?      @map("file_name")
  fileSize         Int?         @map("file_size")
  mimeType         String?      @map("mime_type")
  issueDate        DateTime?    @map("issue_date") @db.Date
  expirationDate   DateTime?    @map("expiration_date") @db.Date
  status           String       @default("active")
  isVerified       Boolean?     @default(false) @map("is_verified")
  verifiedBy       String?      @map("verified_by")
  verifiedAt       DateTime?    @map("verified_at")
  notes            String?
  tags             Json?        @default("[]")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  driver           Driver?      @relation(fields: [driverId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle          Vehicle?     @relation(fields: [vehicleId], references: [id])
  verifiedByUser   User?        @relation("VerifiedByUser", fields: [verifiedBy], references: [id])

  @@index([organizationId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([verifiedBy])
  @@index([type])
  @@index([status])
  @@index([expirationDate], map: "compliance_documents_expiration_idx")
  @@map("compliance_documents")
}

model IftaReport {
  id              String       @id @default(uuid())
  organizationId  String       @map("organization_id")
  quarter         Int
  year            Int
  status          String       @default("draft")
  totalMiles      Int?         @map("total_miles")
  totalGallons    Decimal?     @map("total_gallons") @db.Decimal(10, 3)
  totalTaxOwed    Decimal?     @map("total_tax_owed") @db.Decimal(10, 2)
  totalTaxPaid    Decimal?     @map("total_tax_paid") @db.Decimal(10, 2)
  submittedAt     DateTime?    @map("submitted_at")
  submittedBy     String?      @map("submitted_by")
  dueDate         DateTime?    @map("due_date") @db.Date
  filedDate       DateTime?    @map("filed_date") @db.Date
  reportFileUrl   String?      @map("report_file_url")
  notes           String?
  calculationData Json?        @default("{}") @map("calculation_data")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  supportingDocs  String?      @map("supporting_docs")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedByUser User?        @relation("SubmittedByUser", fields: [submittedBy], references: [id])

  @@index([organizationId])
  @@index([submittedBy])
  @@index([quarter, year])
  @@index([status])
  @@index([dueDate])
  @@map("ifta_reports")
}

model AuditLog {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String?      @map("user_id")
  entityType     String       @map("entity_type")
  entityId       String       @map("entity_id")
  action         String
  changes        Json?
  metadata       Json?
  timestamp      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model WebhookEvent {
  id              String    @id @default(uuid())
  eventType       String    @map("event_type")
  eventId         String    @unique(map: "webhook_events_event_id_unique") @map("event_id")
  organizationId  String?   @map("organization_id")
  userId          String?   @map("user_id")
  payload         Json
  status          String    @default("pending")
  processingError String?   @map("processing_error")
  processedAt     DateTime? @map("processed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  retryCount      Int       @default(0) @map("retry_count")

  @@index([eventType])
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_events")
}

model IftaTrip {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  vehicleId      String       @map("vehicle_id")
  date           DateTime     @map("date")
  distance       Int          @map("distance")
  jurisdiction   String       @map("jurisdiction")
  fuelUsed       Decimal?     @map("fuel_used") @db.Decimal(10, 3)
  notes          String?      @map("notes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle        Vehicle      @relation("VehicleIftaTrips", fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([vehicleId])
  @@index([date])
  @@map("ifta_trips")
}

model IftaFuelPurchase {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  vehicleId      String       @map("vehicle_id")
  date           DateTime     @map("date")
  jurisdiction   String       @map("jurisdiction")
  gallons        Decimal      @map("gallons") @db.Decimal(10, 3)
  amount         Decimal      @map("amount") @db.Decimal(10, 2)
  vendor         String?      @map("vendor")
  receiptNumber  String?      @map("receipt_number")
  notes          String?      @map("notes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle        Vehicle      @relation("VehicleIftaFuelPurchases", fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([vehicleId])
  @@index([date])
  @@map("ifta_fuel_purchases")
}

model OrganizationMembership {
  id             String   @id @default(uuid())
  organizationId String   @map("organization_id")
  userId         String   @map("user_id")
  role           String   @map("role")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId], name: "org_user_unique")
  @@index([organizationId])
  @@index([userId])
  @@map("organization_memberships")
}

enum UserRole {
  admin
  manager
  user
  dispatcher
  driver
  compliance
  accountant
  viewer
}

enum SubscriptionTier {
  free
  pro
  enterprise
}

enum SubscriptionStatus {
  active
  inactive
  trial
  cancelled
}

enum VehicleStatus {
  active
  inactive
  maintenance
  decommissioned
}

enum DriverStatus {
  active
  inactive
  suspended
  terminated
}

enum LoadStatus {
  pending
  assigned
  in_transit
  delivered
  cancelled
}
